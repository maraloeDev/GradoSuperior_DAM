/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.gf.Ejemplos.vistas;

import com.gf.Ejemplos.vistas.GUIPrincipal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author garrodlu
 */
public class GUIPrincipal extends javax.swing.JFrame {

    private static String urlBD = "jdbc:mysql://localhost:3306/prueba";
    private static String user = "root";
    private static String passwd = "";
    private static Connection con;
    private GUIModificar guiModificar;
    private String nombre; //Nombre de la persona a modificar
    private String apellidos; //Apellidos de la persona a modificar
    private int edad; //Edad de la persona a modificar
    private int id; //ID de la persona a modificar

    /**
     * Creates new form GUIPrincipal
     */
    public GUIPrincipal() {
        initComponents();
        setFrame();
    }

    private void setFrame() {
        this.setTitle("Ejemplo1 JDBC - prueba");
        this.jTextArea1.setEditable(false);
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

    public static Connection conectarBD() {

        try {
            con = DriverManager.getConnection(urlBD, user, passwd);
            System.out.println("CONEXION REALIZADA ");
        } catch (SQLException ex) {
            System.out.println("ERROR DE CONEXION" + ex.getMessage());
        }
        return con;
    }

    public static void desconectarBD() {
        try {
            if (con != null) {
                con.close();
            }
            System.out.println("DESCONEXION REALIZADA ");
        } catch (SQLException ex) {
            System.out.println("Error al desconectar...");

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemNueva = new javax.swing.JMenuItem();
        jMenuItemModificar = new javax.swing.JMenuItem();
        jMenuItemEliminar = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemBuscar = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemMostarTodas = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("SGBD");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Personas");

        jMenuItemNueva.setText("Nueva");
        jMenuItemNueva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNuevaActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemNueva);

        jMenuItemModificar.setText("Modificar");
        jMenuItemModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemModificarActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemModificar);

        jMenuItemEliminar.setText("Eliminar");
        jMenuItemEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEliminarActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemEliminar);
        jMenu2.add(jSeparator1);

        jMenuItemBuscar.setText("Buscar");
        jMenuItemBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBuscarActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemBuscar);
        jMenu2.add(jSeparator2);

        jMenuItemMostarTodas.setText("Mostrar Todas");
        jMenuItemMostarTodas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMostarTodasActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemMostarTodas);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemNuevaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNuevaActionPerformed
        try {
            String nombre = JOptionPane.showInputDialog("Introduce nombre: ");
            String apellidos = JOptionPane.showInputDialog("Introduce apellidos: ");
            String edad = JOptionPane.showInputDialog("Introduce edad: ");
            //abrimos la conexión
            conectarBD();
            //Creamos statement
            String sql = "INSERT INTO personas(nombre,apellidos,edad) VALUES('" + nombre + "','" + apellidos + "','" + edad + "')";

            Statement st = con.createStatement();

            int filas = st.executeUpdate(sql);
            if (filas > 0) {
                JOptionPane.showMessageDialog(this, "Inserccion realizada", "Operacion realizada", JOptionPane.INFORMATION_MESSAGE);
                recuperarPersonas();
            } else {
                JOptionPane.showMessageDialog(this, "Inserccion no realizada", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (SQLException ex) {
            System.out.println("" + ex.getMessage());
            //ex.printStackTrace();
        } finally {
            //cerramos la conexión
            desconectarBD();
        }

    }//GEN-LAST:event_jMenuItemNuevaActionPerformed

    private void jMenuItemModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemModificarActionPerformed

        //Recuperamos los id de las personas
        ArrayList<Integer> lista = recuperarPersonas();

        Object seleccion = JOptionPane.showInputDialog(this, "ID persona a modificar",
                "Modificar persona", JOptionPane.PLAIN_MESSAGE, null, lista.toArray(), lista.toArray()[0]);
        Integer id = (Integer) seleccion;

        //Buscamos persona con ese ID
        try {
            conectarBD();
            String sql = "SELECT * FROM personas WHERE idPersona=" + id;
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            //Recogemos la persona 
            rs.next();
            nombre = rs.getString("nombre");
            apellidos = rs.getString("apellidos");
            edad = rs.getInt("edad");
            this.id = rs.getInt("idPersona");
            rs.close();

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());

        } finally {
            desconectarBD();
        }

        //Creacion y apertura del dialogo con los datos de la persona a modificar
        if (guiModificar == null) {
            guiModificar = new GUIModificar(this, true);

        }
        this.jTextArea1.setText("");
        guiModificar.setVisible(true);

    }//GEN-LAST:event_jMenuItemModificarActionPerformed

    private void jMenuItemEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEliminarActionPerformed
        this.jTextArea1.setText("");
        String id = JOptionPane.showInputDialog(this, "ID persona a eliminar: ");
        if (id == null || id.isEmpty()) {
            return;
        }
        try {
            if (!recuperarPersona(Integer.parseInt(id))) {
                return;
            }
            int resp = JOptionPane.showConfirmDialog(this, "¿Estas seguro de querer eliminar a la persona?");
            if (resp == JOptionPane.OK_OPTION) {
                this.jTextArea1.setText("");
                eliminarPersona(Integer.parseInt(id));
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "ID no númerico", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jMenuItemEliminarActionPerformed

    private void jMenuItemBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBuscarActionPerformed
        this.jTextArea1.setText("");
        String id = JOptionPane.showInputDialog(this, "ID persona: ");
        if (id == null || id.isEmpty()) {
            return;
        }
        try {
            recuperarPersona(Integer.parseInt(id));
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "ID no númerico", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jMenuItemBuscarActionPerformed

    private void jMenuItemMostarTodasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMostarTodasActionPerformed
        this.jTextArea1.setText("");
        recuperarPersonas();

    }//GEN-LAST:event_jMenuItemMostarTodasActionPerformed
    private void eliminarPersona(int id) {
        try {
            //abrimos la conexión
            conectarBD();
            //Creamos statement
            String sql = "DELETE FROM personas where idPersona = " + id;

            Statement st = con.createStatement();

            int filas = st.executeUpdate(sql);
            if (filas > 0) {
                JOptionPane.showMessageDialog(this, "Persona Borrada", "Operacion realizada", JOptionPane.INFORMATION_MESSAGE);
                recuperarPersonas();
            } else {
                JOptionPane.showMessageDialog(this, "Error al borrar", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (SQLException ex) {
            System.out.println("" + ex.getMessage());
            //ex.printStackTrace();
        } finally {
            //cerramos la conexión
            desconectarBD();
        }
    }

    private boolean recuperarPersona(int id) {
        boolean existe = false;
        try {
            conectarBD();
            String sql = "SELECT * FROM personas WHERE idPersona=" + id;
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            //Recorremos el resultset avanzando el cursor fila a fila
            if (rs.next()) {
                //Procesamos la fila
                String fila = String.valueOf(rs.getInt("idPersona")) + "->"
                        + rs.getString("nombre") + " "
                        + rs.getString("apellidos") + " Edad: "
                        + rs.getInt("edad");
                this.jTextArea1.append(fila + "\n");
                existe = true;
            } else {
                JOptionPane.showMessageDialog(this, "El ID no pertenece a ningun registro", "Error", JOptionPane.ERROR_MESSAGE);
                existe = false;
            }
            rs.close(); //Se puede cerrar sin tener que desconectar la BD;
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());

        } finally {
            desconectarBD();
        }
        return existe;
    }
//Metodo que muestra todas las perosnas en el are de texto
    // y devuelve una lista con todos los id.

    public ArrayList<Integer> recuperarPersonas() {
        ArrayList<Integer> listaIDS = null;
        try {
            conectarBD();
            String sql = "SELECT * FROM personas";
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);

            listaIDS = new ArrayList<>();
            //Recorremos el resultset avanzando el cursor fila a fila
            while (rs.next()) {
                listaIDS.add(rs.getInt("idPersona"));
                //Procesamos la fila
                String fila = String.valueOf(rs.getInt("idPersona")) + "->"
                        + rs.getString("nombre") + " "
                        + rs.getString("apellidos") + " Edad: "
                        + rs.getInt("edad");
                this.jTextArea1.append(fila + "\n");

            }
            rs.close(); //Se puede cerrar sin tener que desconectar la BD;
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());

        } finally {
            desconectarBD();
        }
        return listaIDS;
    }

    public String getNombre() {
        return nombre;
    }

    public String getApellidos() {
        return apellidos;
    }

    public int getEdad() {
        return edad;
    }

    public int getId() {
        return id;
    }

    public static Connection getCon() {
        return con;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemBuscar;
    private javax.swing.JMenuItem jMenuItemEliminar;
    private javax.swing.JMenuItem jMenuItemModificar;
    private javax.swing.JMenuItem jMenuItemMostarTodas;
    private javax.swing.JMenuItem jMenuItemNueva;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
