Ruben alfonso
-- 1. Crea una función que reciba dos números y visualice su suma.
create or replace function suma_numeros (num1 number, num2 number) return number
is
	v_resultado	number;
begin
    v_resultado := num1 + num2;
    return v_resultado;
exception
	when too_many_rows then dbms_output.put_line('Demasiadas filas');
	when no_data_found then dbms_output.put_line('No hay resultados');
	when others then dbms_output.put_line('ERROR');
end suma_numeros;


begin
	dbms_output.put_line(suma_numeros(23,1));
end;

-- 2. Crea un procedimiento que reciba una cadena y la visualice alternando cada carácter en mayúsculas y minúsculas. Utiliza los tres tipos de bucles (WHILE, LOOP y FOR).
create or replace procedure cadena_capitalizacion (cadena varchar2)
is
	v_resultado	varchar2(100);
	v_paso		integer;
begin
    /*
    v_paso := 1;
    while v_paso-1<length(cadena)
    loop
        if (v_paso mod 2 != 0) then
        	v_resultado := v_resultado || upper(substr(cadena,v_paso,1));
		else 
            v_resultado := v_resultado || lower(substr(cadena,v_paso,1));
		end if;
		v_paso := v_paso + 1;
    end loop;
	*/ /*
	v_paso := 1;
    loop
    	if (v_paso mod 2 != 0) then
        	v_resultado := v_resultado || upper(substr(cadena,v_paso,1));
		else 
            v_resultado := v_resultado || lower(substr(cadena,v_paso,1));
		end if;
		v_paso := v_paso + 1;


	 	exit when v_paso>length(cadena);
	end loop;
	*/ 
	for contador in 1..(length(cadena)+1)
    loop
    	if (contador mod 2 != 0) then
        	v_resultado := v_resultado || upper(substr(cadena,contador,1));
		else 
            v_resultado := v_resultado || lower(substr(cadena,contador,1));
		end if;
	end loop;


	dbms_output.put_line(v_resultado);
exception
	when too_many_rows then dbms_output.put_line('Demasiadas filas');
	when no_data_found then dbms_output.put_line('No hay resultados');
	when others then dbms_output.put_line('ERROR');
end cadena_capitalizacion;


begin
	cadena_capitalizacion('Desarrollo de aplicaciones multiplataforma');
end;

-- 3. Crea un programa PL/SQL que a partir de un nombre y dos apellidos (separados por espacios), muestre el primer apellido.
create or replace procedure primer_apellido (cadena varchar2)
is
	v_resultado	varchar2(100);
begin
    v_resultado := substr(cadena, instr(cadena,' ')+1, instr(cadena,' ', instr(cadena,' '))+1);
	dbms_output.put_line(v_resultado);
exception
	when too_many_rows then dbms_output.put_line('Demasiadas filas');
	when no_data_found then dbms_output.put_line('No hay resultados');
	when others then dbms_output.put_line('ERROR');
end primer_apellido;


begin
	primer_apellido('Rubén Alfonso Gonzalo');
end;
Ángel Paredes
--4
create or replace function num_fecha (fecha date)
    return number;
is
    v_anio	number;

begin
    v_anio:= to_number(to_char(date,'YYYY'));
end;

--5
create or replace function dias_entre_fechas_uwu (fecha date, fecha2 date)
    return number
is
    
	v_anios_entre 	number;
	v_dias_entre	number;
begin
    v_dias_entre:=fecha-fecha2;
	v_anios_entre:=trunc(v_dias_entre/365);
	return v_anios_entre;
end;

--Noel
create or replace function sustituye_no_alfabetico (cadena varchar2) return varchar2
is
    v_cadena	varchar2(20);
	v_char		char;
begin
    v_cadena := '';
    for	i in 1..length(cadena) 
    loop
    	v_char:= substr(cadena,i,1);
		if upper(v_char) between 'A' and 'Z' then
            v_cadena := v_cadena || v_char;
		else
        	v_cadena := v_cadena || ' ';
    	end if;
	end loop;
	return v_cadena;
end sustituye_no_alfabetico;

Sergio Otero
--6. Crea un procedimiento que reciba una lista de hasta cinco números y visualice
--su media aritmética.
create or replace procedure media(v_n_uno number,v_n_dos number,v_n_tres number,v_n_cuatro number,v_n_cinco number)
is
	v_media	number;
begin
	v_media:=(v_n_uno+v_n_dos+v_n_tres+v_n_cuatro+v_n_cinco)/5;
	dbms_output.put_line(v_media);
end;
--Prueba
begin
    media(3,6,4,2,8);
end;

--Ruben
drop table datos;
create table datos(
  	numero	integer  
);
insert into datos values (1);
insert into datos values (1);
insert into datos values (1);
insert into datos values (1);
insert into datos values (6);


create or replace procedure media_cinco
is
    v_cant_numeros	integer;
	v_resultado		integer;
begin
    select count(*) into v_cant_numeros from datos;
	if (v_cant_numeros > 5) then dbms_output.put_line('Lo siento solo se admiten hasta 5 números.');
	else 
    	select avg(numero) into v_resultado from datos;
		v_resultado := round(v_resultado, 2);
    	dbms_output.put_line('La media de los numeros de la tabla datos es ' || v_resultado);
	end if;
exception
	when too_many_rows then dbms_output.put_line('Demasiadas filas');
	when no_data_found then dbms_output.put_line('No hay resultados');
	when others then dbms_output.put_line('ERROR');
end media_cinco;


begin
	media_cinco();
end;
--LUCIA
create or replace procedure mediaAritmetica(num1 number, num2 number, num3 number, num4 number, num5 number)
is
	sumaTotal number := 0; 
	contNum   number := 0;
	v_media number;
begin
	if num1 is not null then  
    	sumatotal := sumaTotal + num1;
    	contNum := contNum + 1;
	end if;
	if num2 is not null then
    	sumatotal := sumaTotal + num2;
    	contNum := contNum + 1;
	end if;
	if num3 is not null then
        sumatotal := sumaTotal + num3;
    	contNum := contNum + 1;
	end if;
	if num4 is not null then
        sumatotal := sumaTotal + num4;
    	contNum := contNum + 1;
	end if;
	if num5 is not null  then
        sumatotal := sumaTotal + num5;
    	contNum := contNum + 1;
	end if;
	if contNum > 0 then
    v_media := sumaTotal/contNum;
	dbms_output.put_line('Media Aritmetica: ' || v_media);
	end if;
end mediaAritmetica;
begin 
   mediaAritmetica(10,5,null, null, null);
end;

Sofia Arcones Blanco
8. Crea un procedimiento que permita borrar un empleado (tabla EMPLE) cuyo número es recibido como parámetro.
desc emple;
select * from emple;
create or replace procedure borrar_empleado(numero_empleado emple.emp_no%type)
is
begin
  delete from emple
   where emp_no = numero_empleado;
   
   DBMS_OUTPUT.PUT_LINE('Empleado borrado correctamente.');
exception
   when NO_DATA_FOUND then
      DBMS_OUTPUT.PUT_LINE('No se encontró el empleado con número ' || numero_empleado);
   when OTHERS then
      DBMS_OUTPUT.PUT_LINE('Error al borrar el empleado.');
end;

BEGIN
   borrar_empleado(7499);
END;

9. Crea un procedimiento que modifique la localidad de un departamento (tabla DEPART). El procedimiento recibirá como parámetros el número del departamento y la nueva localidad.
desc depart;
select * from depart;
create or replace procedure modificar_localidad(numero_departamento  number, nueva_localidad varchar2)
is
begin
   update depart
   set loc = upper(nueva_localidad)
   where dept_no = numero_departamento;
   
   DBMS_OUTPUT.PUT_LINE('Localidad modificada correctamente.');
exception
   when NO_DATA_FOUND then
      DBMS_OUTPUT.PUT_LINE('No se encontró el departamento con número ' || numero_departamento);
   when OTHERS then
      DBMS_OUTPUT.PUT_LINE('Error al modificar la localidad del departamento.');
end;

BEGIN
   modificar_localidad(30, 'Valladolid');
END;



10. Visualiza todos los procedimientos y funciones del usuario almacenados en la base de datos y su situación (valid o invalid).
select object_name, object_type, status
from user_objects
where object_type in ('PROCEDURE', 'FUNCTION');
